Benzene TODO file
=================

broderic [090506] (in rough order of importance)
* Add time control to mohex
* Handle terminal states properly in MoHex
  Ie, do not use fillin and deletion to do this
* Create HexPosition class; make StoneBoard use it.
* Better book visualization tools
* Switch dead region/decomp detection to new Phil algo
* Make GroupBoard and PatternBoard not derive off of StoneBoard
* Add HexBoard::Resize() method; use in SyncBoard()
* Have Wolve check TT for losing moves in move generation.
  * Phil says `maybe': if solve strong moves but not weak, then Wolve will
    have to play a weaker move, and so this may weaken the player :(
* Support reading installed shared data in $(pkgdatadir)
* Remove lssolve from src/util/ and replace with boost::ublas
* Proof class in Solver
  * Proof class should do assertions, reductions
  * Support permanently inferior in solver

ph [090416]
* Unique probe sequence for solver:
  * If try losing move and PV winning reply matches pattern, then state loses
* Induced path transpositions for solver:
  * Apply files to get more DB transpositions by shifting played moves
  * Compute closed set of all transposition types
* Solver move ordering:
  * Try moving split decomposition moves to the top of the list
  * If that doesn't work, try making the mustplay count for split decomposition
    moves equal to the max mustplay on either side of the decomp.
* Reversible moves
  * Pattern file exists, just need to add it to ICE :) Like vulnerable, but
    no fill-in can be computed
* Virtual-connection improvements:
  * Add fill-in for keys (and maybe endpoints?)
  * Common-substrategy
  * Backing-up/recalling connections..?
* MoHex improvements:
  * Learned-reponse array through UCT tree sequences (use for rollouts)
* Opening books guided adjustment:
  * Allow it to analyze/expand path of sgfs to where the book drops out
* Evaluation function possibilities
  * Try weighted tuple of different virtual connection distances between edges
* Tournament tool improvements:
  * Script for automatic post-game sgf analysis with solver
* Proof-set pruned states should perhaps be stored in DB/TT..?
* Inferior cell improvements:
  * Implement algorithm developed with Laurie to find more dead cell patterns
  * Develop similar algorithm for captured
  * Create larger list of vulnerable and dominated from above work
* Mustplay mask
* Website stuff:
  * Create handicap Java applet
